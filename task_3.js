// ❓ У Кати насыщенный день на работе. Ей надо передать в разных договоров коллегам. Все встречи происходят на разных этажах, а между этажами можно перемещаться только по лестничным
// -
// пролетам считается, что это улучшает физическую форму сотрудников. Прохождение каждого пролета занимает ровно 1 минуту.
// Сейчас Катя на парковочном этаже, планирует свой маршрут. Коллег можно посетить в любом порядке, но один из них покинет офис через t минут. С парковочного этажа лестницы нет - только лифт, на котором можно подняться на любой этаж.
// В итоге план Кати следующий:
// 1. Подняться на лифте на произвольный этаж. Считается, что лифт поднимается на любой этаж за 0 минут.
// 2. Передать всем коллегам договоры, перемещаясь между этажами по лестнице. Считается, что договоры на этаже передаются мгновенно.
// 3. В первые 1 минут передать договор тому коллеге, который планирует уйти.
// 4. Пройти минимальное количество лестничных пролетов.
// Помогите Кате выполнить все пункты ее плана.
// Формат входных данных
// В первой строке вводятся целые положительные числа и t (2≤ n,t≤100) - количество сотрудников и время, когда один из сотрудников покинет офис (в минутах). В следующей строке п чисел - номера этажей, на которых находятся сотрудники. Все числа различны и по абсолютной величине не превосходят 100. Номера этажей даны в порядке возрастания. В следующей строке записан номер сотрудника, который уйдет через 1 минут.
// Формат выходных данных
// Выведите одно число - минимально возможное число лестничных пролетов, которое понадобится пройти Кате.
// Замечание
// В первом примере времени достаточно, чтобы Катя поднялась по этажам по порядку.
// Во втором примере Кате понадобится подняться к уходящему сотруднику, а потом пройти всех остальных - - например, в порядке {1, 2, 3, 4, 6}

// ✅ SOLUTION 
const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

let lines = [];

rl.on('line', (line) => {
  lines.push(line);
  if (lines.length === 3) {
    rl.close();
  }
});

rl.on('close', () => {
  const [collbaorators, tOut] = lines[0].split(/\s+/).map(Number)
  const numFloors = lines[1].split(/\s+/).map(Number)
  const collaborator = Number(lines[2].trim(' '))
  const idxColOut = collaborator - 1

  let result = 0
  if (numFloors[idxColOut] - numFloors[0] <= tOut
    || numFloors[numFloors.length - 1] - numFloors[idxColOut] <= tOut
  ) {
    result = numFloors[numFloors.length - 1] - numFloors[0]
  } else if (numFloors[idxColOut] - numFloors[0] <= numFloors[numFloors.length - 1] - numFloors[idxColOut]) {
    const temp = numFloors[idxColOut] - numFloors[0]
    result = numFloors[numFloors.length - 1] - numFloors[0] + temp
  } else {
    const temp = numFloors[numFloors.length - 1] - numFloors[idxColOut]
    result = numFloors[numFloors.length - 1] - numFloors[0] + temp
  }

  console.log(result)
})